#!/bin/sh

# script/bootstrap: Setup a new laptop at Brightline

# Exit script if any commands return errors (if they exit with non-zero)
set -e

# Work from the user's `Downloads` directory
cd "$HOME/Downloads"

echo
echo "==> Running script/bootstrap…"
echo

SHELL_CONFIG="$HOME/.zshrc"
touch $SHELL_CONFIG

# Check if RSA or Ed25519 SSH keys already exist
if [[ -f ~/.ssh/id_rsa ]]; then
  echo "==> Found SSH key in ~/.ssh/id_rsa"
  echo
elif [[ -f ~/.ssh/id_ed25519 ]]; then
  echo "==> Found SSH key in ~/.ssh/id_ed25519"
  echo
else
  # Setup Git/GitHub
  echo "==> What email address do you use with your GitHub account?"

  read github_email </dev/tty || {
    github_email=""
  }

  if [[ $github_email == "" ]]; then
    echo "==> ERROR! An email address is required."
    echo "==>        Re-run this script to try again."
    echo
    exit 1
  fi

  # From: https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
  echo "==> Generating SSH key for $github_email …"
  ssh-keygen -t rsa -b 4096 -C "$github_email"
  echo

  echo "==> Starting ssh-agent in the background…"
  eval "$(ssh-agent -s)"
  echo

  # Ensure that SSH config file exists
  touch ~/.ssh/config

  # Add SSH key loading to SSH config
  echo "==> Adding SSH config to automatically load SSH keys"
  grep -qF -- "IdentityFile ~/.ssh/id_rsa" ~/.ssh/config || echo "\n\nHost *\n AddKeysToAgent yes\n UseKeychain yes\n IdentityFile ~/.ssh/id_rsa\n\n" >> ~/.ssh/config
  echo

  # Add SSH private key to the ssh-agent and store passphrase in your keychain
  echo "==> Adding SSH key to ssh-agent and storing passphrase in your keychain"
  ssh-add -K ~/.ssh/id_rsa
  echo

  echo "==> Copying your public SSH key to clipboard…"
  pbcopy < ~/.ssh/id_rsa.pub
  echo

  echo "==> Your browser will be opened to a GitHub SSH Keys settings page…"
  echo "==> You’ll need to paste into the 'Key' field, then click the 'Add SSH Key' button…"
  echo

  echo "==> Press enter to open your browser…"
  read noop </dev/tty || {
    noop=""
  }

  echo "==> Opening your browser to a GitHub settings page…"
  open https://github.com/settings/ssh/new
  echo

  echo "==> Press enter to continue after you have saved your SSH key on GitHub…"
  read nooop </dev/tty || {
    nooop=""
  }
  echo
fi

# Download strap.sh and run it
echo "==> Downloading strap.sh script from github.com/MikeMcQuaid/strap…"
curl https://raw.githubusercontent.com/MikeMcQuaid/strap/master/bin/strap.sh -o strap.sh
echo

echo "==> Strapping your Mac…"
sh strap.sh
echo

# Delete strap.sh
echo "==> Deleting strap.sh script…"
rm strap.sh
echo

echo "==> Injecting homebrew into PATH"
if grep -Fq "/opt/homebrew/bin" $SHELL_CONFIG
then
  echo "    Already found homebrew in path. Skipping."
else
  echo "export PATH=/opt/homebrew/bin:$PATH" >> $SHELL_CONFIG && source $SHELL_CONFIG
  echo
fi
source $SHELL_CONFIG

echo "==> Bundling engineering Brewfile to install remaining developer tools and various other niceties…"
curl https://raw.githubusercontent.com/hellobrightline/workstation/main/Brewfile | brew bundle --file=-

echo "==> Installing asdf…"
if command -v asdf &> /dev/null; then
  echo "    asdf already installed. Skipping."
else
  brew install asdf
  echo
fi

echo "==> Injecting asdf into PATH"
ASDF_DATA_DIR=`brew --prefix asdf`

if grep -Fq "$ASDF_DATA_DIR" $SHELL_CONFIG
then
  echo "    Already found asdf in path. Skipping."
else
  echo "export ASDF_DATA_DIR=$ASDF_DATA_DIR/" >> $SHELL_CONFIG
  echo 'source $ASDF_DATA_DIR/asdf.sh' >> $SHELL_CONFIG
  echo
fi
source $SHELL_CONFIG


echo "==> Installing ruby asdf plugin"
asdf plugin-list | grep ruby || asdf plugin-add ruby
echo

echo "==> Installing node asdf plugin"
asdf plugin-list | grep nodejs || asdf plugin-add nodejs
echo

echo "==> Installing yarn asdf plugin"
asdf plugin-list | grep yarn || asdf plugin-add yarn
echo

# All done!
echo "==> SUCCESS! Your development environment is now bootstrapped!"
echo
